<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Modern Budget Tracker</title>
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- React & ReactDOM -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    
    <!-- Babel for JSX -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    
    <!-- Recharts -->
    <script src="https://unpkg.com/recharts@2.5.0/dist/Recharts.js"></script>
    
    <!-- Lucide Icons -->
    <script src="https://unpkg.com/lucide@latest"></script>
    
    <style>
        /* ==================== CUSTOM CSS STYLES ==================== */
        
        /* Base Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }
        
        /* Animations */
        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        @keyframes slideInLeft {
            from {
                opacity: 0;
                transform: translateX(-30px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }
        
        @keyframes slideInRight {
            from {
                opacity: 0;
                transform: translateX(30px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }
        
        @keyframes blob {
            0%, 100% {
                transform: translate(0, 0) scale(1);
            }
            25% {
                transform: translate(20px, -50px) scale(1.1);
            }
            50% {
                transform: translate(-20px, 20px) scale(0.9);
            }
            75% {
                transform: translate(50px, 50px) scale(1.05);
            }
        }
        
        @keyframes float {
            0%, 100% {
                transform: translateY(0px);
            }
            50% {
                transform: translateY(-20px);
            }
        }
        
        @keyframes pulse {
            0%, 100% {
                opacity: 1;
            }
            50% {
                opacity: 0.5;
            }
        }
        
        @keyframes shimmer {
            0% {
                background-position: -1000px 0;
            }
            100% {
                background-position: 1000px 0;
            }
        }
        
        /* Utility Classes */
        .animate-fade-in {
            animation: fadeIn 0.6s ease-out forwards;
        }
        
        .animate-slide-in-left {
            animation: slideInLeft 0.6s ease-out forwards;
        }
        
        .animate-slide-in-right {
            animation: slideInRight 0.6s ease-out forwards;
        }
        
        .animate-blob {
            animation: blob 7s infinite;
        }
        
        .animate-float {
            animation: float 3s ease-in-out infinite;
        }
        
        .animate-pulse {
            animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
        }
        
        .animation-delay-2000 {
            animation-delay: 2s;
        }
        
        .animation-delay-4000 {
            animation-delay: 4s;
        }
        
        /* Glassmorphism Effect */
        .glass {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .glass-dark {
            background: rgba(0, 0, 0, 0.2);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        /* Card Styles */
        .card {
            background: white;
            border-radius: 1rem;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
        }
        
        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
        }
        
        .card-gradient {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        
        /* Button Styles */
        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 0.75rem 2rem;
            border-radius: 9999px;
            font-weight: 600;
            transition: all 0.3s ease;
            border: none;
            cursor: pointer;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
        }
        
        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.6);
        }
        
        .btn-secondary {
            background: white;
            color: #667eea;
            padding: 0.75rem 2rem;
            border-radius: 9999px;
            font-weight: 600;
            transition: all 0.3s ease;
            border: 2px solid #667eea;
            cursor: pointer;
        }
        
        .btn-secondary:hover {
            background: #667eea;
            color: white;
        }
        
        /* Input Styles */
        .input-modern {
            width: 100%;
            padding: 0.875rem 1rem;
            border: 2px solid #e5e7eb;
            border-radius: 0.75rem;
            font-size: 1rem;
            transition: all 0.3s ease;
            outline: none;
        }
        
        .input-modern:focus {
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }
        
        /* Gradient Text */
        .gradient-text {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        /* Scrollbar Styles */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        
        ::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        
        ::-webkit-scrollbar-thumb {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 4px;
        }
        
        ::-webkit-scrollbar-thumb:hover {
            background: linear-gradient(135deg, #764ba2 0%, #667eea 100%);
        }
        
        /* Loading Shimmer */
        .shimmer {
            background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
            background-size: 1000px 100%;
            animation: shimmer 2s infinite;
        }
        
        /* Responsive Table */
        .table-responsive {
            overflow-x: auto;
            -webkit-overflow-scrolling: touch;
        }
        
        /* Status Badge */
        .badge {
            display: inline-block;
            padding: 0.25rem 0.75rem;
            border-radius: 9999px;
            font-size: 0.875rem;
            font-weight: 600;
        }
        
        .badge-income {
            background: #d1fae5;
            color: #065f46;
        }
        
        .badge-expense {
            background: #fee2e2;
            color: #991b1b;
        }
        
        /* Chart Container */
        .chart-container {
            position: relative;
            height: 300px;
            width: 100%;
        }
        
        /* Hero Section */
        .hero-gradient {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
        }
        
        /* Stat Card */
        .stat-card {
            position: relative;
            overflow: hidden;
        }
        
        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0) 100%);
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        .stat-card:hover::before {
            opacity: 1;
        }
        
        /* Mobile Menu */
        .mobile-menu {
            transform: translateY(-100%);
            transition: transform 0.3s ease;
        }
        
        .mobile-menu.open {
            transform: translateY(0);
        }
        
        /* Skeleton Loader */
        .skeleton {
            background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
            background-size: 200% 100%;
            animation: shimmer 1.5s infinite;
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        // ==================== JAVASCRIPT / REACT CODE ====================
        
        const { useState, useEffect } = React;
        const { 
            LineChart, Line, BarChart, Bar, PieChart, Pie, Cell, 
            XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer 
        } = Recharts;

        // ==================== UTILITY FUNCTIONS ====================
        
        const formatCurrency = (amount) => {
            return new Intl.NumberFormat('en-US', {
                style: 'currency',
                currency: 'USD'
            }).format(amount);
        };

        const formatDate = (dateString) => {
            return new Date(dateString).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'short',
                day: 'numeric'
            });
        };

        // ==================== ICON COMPONENTS ====================
        
        const Icon = ({ name, className = "w-6 h-6", ...props }) => {
            useEffect(() => {
                lucide.createIcons();
            }, []);
            return React.createElement('i', {
                'data-lucide': name,
                className,
                ...props
            });
        };

        // ==================== MAIN APP COMPONENT ====================
        
        const BudgetTracker = () => {
            // State Management
            const [currentPage, setCurrentPage] = useState('index');
            const [isLoggedIn, setIsLoggedIn] = useState(false);
            const [showPassword, setShowPassword] = useState(false);
            const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
            const [transactions, setTransactions] = useState([]);
            const [formData, setFormData] = useState({
                description: '',
                amount: '',
                type: 'expense',
                category: 'Food',
                date: new Date().toISOString().split('T')[0]
            });
            const [filters, setFilters] = useState({
                search: '',
                type: 'all',
                category: 'all'
            });
            const [animate, setAnimate] = useState(false);

            // Animation trigger
            useEffect(() => {
                setAnimate(false);
                setTimeout(() => setAnimate(true), 50);
                lucide.createIcons();
            }, [currentPage]);

            // Chart Colors
            const COLORS = ['#667eea', '#764ba2', '#f093fb', '#4facfe', '#00f2fe', '#43e97b', '#fa709a', '#fee140'];

            // ==================== DATA CALCULATIONS ====================
            
            const totalIncome = transactions
                .filter(t => t.type === 'income')
                .reduce((sum, t) => sum + t.amount, 0);

            const totalExpenses = transactions
                .filter(t => t.type === 'expense')
                .reduce((sum, t) => sum + t.amount, 0);

            const balance = totalIncome - totalExpenses;

            const getExpenseChartData = () => {
                const expensesByCategory = {};
                transactions
                    .filter(t => t.type === 'expense')
                    .forEach(t => {
                        expensesByCategory[t.category] = (expensesByCategory[t.category] || 0) + t.amount;
                    });
                return Object.entries(expensesByCategory).map(([name, value]) => ({ name, value }));
            };

            const getMonthlyTrendData = () => {
                const monthlyData = {};
                transactions.forEach(t => {
                    const month = t.date.substring(0, 7);
                    if (!monthlyData[month]) {
                        monthlyData[month] = { month, income: 0, expense: 0 };
                    }
                    monthlyData[month][t.type] += t.amount;
                });
                return Object.values(monthlyData).sort((a, b) => a.month.localeCompare(b.month));
            };

            const getCategoryData = () => {
                const categoryData = {};
                transactions.forEach(t => {
                    categoryData[t.category] = (categoryData[t.category] || 0) + t.amount;
                });
                return Object.entries(categoryData).map(([name, amount]) => ({ name, amount }));
            };

            // ==================== EVENT HANDLERS ====================
            
            const handleLogin = (e) => {
                e.preventDefault();
                setIsLoggedIn(true);
                setCurrentPage('home');
            };

            const handleLogout = () => {
                setIsLoggedIn(false);
                setCurrentPage('index');
                setMobileMenuOpen(false);
            };

            const handleSubmit = (e) => {
                e.preventDefault();
                const newTransaction = {
                    id: Date.now(),
                    ...formData,
                    amount: parseFloat(formData.amount)
                };
                setTransactions([...transactions, newTransaction]);
                setFormData({
                    description: '',
                    amount: '',
                    type: 'expense',
                    category: 'Food',
                    date: new Date().toISOString().split('T')[0]
                });
                alert('Transaction added successfully!');
            };

            const deleteTransaction = (id) => {
                if (window.confirm('Are you sure you want to delete this transaction?')) {
                    setTransactions(transactions.filter(t => t.id !== id));
                }
            };

            const filteredTransactions = transactions.filter(t => {
                const matchesSearch = t.description.toLowerCase().includes(filters.search.toLowerCase()) ||
                                     t.category.toLowerCase().includes(filters.search.toLowerCase());
                const matchesType = filters.type === 'all' || t.type === filters.type;
                const matchesCategory = filters.category === 'all' || t.category === filters.category;
                return matchesSearch && matchesType && matchesCategory;
            });

            // ==================== PAGE COMPONENTS ====================
            
            // Index/Landing Page
            const IndexPage = () => (
                <div className="min-h-screen hero-gradient flex items-center justify-center p-4 overflow-hidden relative">
                    {/* Animated Background Blobs */}
                    <div className="absolute inset-0 overflow-hidden">
                        <div className="absolute top-1/4 left-1/4 w-96 h-96 bg-purple-400 rounded-full mix-blend-multiply filter blur-3xl opacity-30 animate-blob"></div>
                        <div className="absolute top-1/3 right-1/4 w-96 h-96 bg-pink-400 rounded-full mix-blend-multiply filter blur-3xl opacity-30 animate-blob animation-delay-2000"></div>
                        <div className="absolute bottom-1/4 left-1/3 w-96 h-96 bg-indigo-400 rounded-full mix-blend-multiply filter blur-3xl opacity-30 animate-blob animation-delay-4000"></div>
                    </div>

                    <div className={`relative z-10 text-center max-w-6xl mx-auto transition-all duration-1000 ${animate ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-10'}`}>
                        <div className="mb-12 animate-float">
                            <div className="inline-block p-8 glass rounded-3xl mb-8 shadow-2xl">
                                <Icon name="dollar-sign" className="w-24 h-24 text-white" />
                            </div>
                            <h1 className="text-7xl md:text-8xl font-bold text-white mb-6 tracking-tight">
                                Budget Tracker
                            </h1>
                            <p className="text-2xl md:text-3xl text-white/90 mb-4 font-light">
                                Master Your Money, Achieve Your Goals
                            </p>
                            <p className="text-lg text-white/70 max-w-2xl mx-auto">
                                A beautiful, intuitive way to track expenses, monitor income, and visualize your financial journey
                            </p>
                        </div>

                        <div className="grid md:grid-cols-3 gap-8 mb-12">
                            <div className="glass p-8 rounded-3xl transform hover:scale-105 transition-all duration-300 hover:shadow-2xl">
                                <Icon name="trending-up" className="w-16 h-16 text-green-300 mx-auto mb-6" />
                                <h3 className="text-white font-bold text-2xl mb-3">Track Income</h3>
                                <p className="text-white/80 text-lg">Monitor all your income sources in one place with detailed categorization</p>
                            </div>
                            <div className="glass p-8 rounded-3xl transform hover:scale-105 transition-all duration-300 hover:shadow-2xl">
                                <Icon name="trending-down" className="w-16 h-16 text-red-300 mx-auto mb-6" />
                                <h3 className="text-white font-bold text-2xl mb-3">Track Expenses</h3>
                                <p className="text-white/80 text-lg">Keep tabs on your spending with smart categorization and insights</p>
                            </div>
                            <div className="glass p-8 rounded-3xl transform hover:scale-105 transition-all duration-300 hover:shadow-2xl">
                                <Icon name="bar-chart-3" className="w-16 h-16 text-blue-300 mx-auto mb-6" />
                                <h3 className="text-white font-bold text-2xl mb-3">Visual Reports</h3>
                                <p className="text-white/80 text-lg">Beautiful charts and insights to understand your financial health</p>
                            </div>
                        </div>

                        <button
                            onClick={() => setCurrentPage('login')}
                            className="btn-primary text-xl px-16 py-5 shadow-2xl"
                        >
                            Get Started Free
                        </button>
                    </div>
                </div>
            );

            // Login Page
            const LoginPage = () => (
                <div className="min-h-screen hero-gradient flex items-center jus
